# -*- coding: utf-8 -*-
"""9_sept_denspart_charge_extract.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tl7ekHWm5fhJoYWTvb7_7Z-oGtExugwv
"""

# Install packages in Google Colab. Don't run this cell if packages/data is already in your environment
! pip install scipy==1.10.1
! pip install git+https://github.com/theochem/iodata.git
! pip install git+https://github.com/theochem/grid.git
! pip install git+https://github.com/theochem/gbasis.git
! pip install git+https://github.com/theochem/denspart.git

!unzip fchk_compressed.zip

import glob
import csv
from iodata import load_one
from grid.becke import BeckeWeights
from grid.molgrid import MolGrid
from grid.onedgrid import GaussChebyshev
from grid.rtransform import BeckeRTransform
from gbasis.wrappers import from_iodata
from gbasis.evals.density import evaluate_density
import numpy as np
from denspart.mbis import MBISProModel
from denspart.vh import optimize_reduce_pro_model

# Define a directory containing your fchk files
fchk_directory = "/content/"

# Use glob to find all *.fchk files in the directory
fchk_files = glob.glob(fchk_directory + "*.fchk")

# Create a list to store files that did not converge
did_not_converge = []

# Create a CSV file for writing
with open("atomic_charges.csv", mode="w", newline="") as csvfile:
    writer = csv.writer(csvfile)

    # Write the header row
    writer.writerow(["File", "Atomic Charges"])

    # Iterate through the fchk files and process them
    for fchk_file in fchk_files:
        print("Processing file:", fchk_file)

        try:
            # Load the fchk file using IOData
            mol = load_one(fchk_file)

            # Make Becke-Lebedev molecular grid (using preset grid)
            oned = GaussChebyshev(100)
            rgrid = BeckeRTransform(1e-4, 1.5).transform_1d_grid(oned)
            grid = MolGrid.from_preset(mol.atnums, mol.atcoords, rgrid, "ultrafine", BeckeWeights())

            # Calculate the one-electron density matrix
            one_rdm = np.dot(mol.mo.coeffs * mol.mo.occs, mol.mo.coeffs.T)

            # Convert the basis from IOData format
            basis = from_iodata(mol)

            # Evaluate the density
            density = evaluate_density(one_rdm, basis[0], grid.points, coord_type=basis[1])

            # Create and optimize the MBISProModel
            pro_model_init = MBISProModel.from_geometry(mol.atnums, mol.atcoords)
            pro_model, localgrids = optimize_reduce_pro_model(pro_model_init, grid, density)

            # Extract atomic charges
            charges = pro_model.charges

            # Write the results to the CSV file
            writer.writerow([fchk_file, charges])
        except RuntimeError as e:
            print(f"Optimization for {fchk_file} failed with error: {str(e)}")
            did_not_converge.append(fchk_file)

print("Results saved to atomic_charges.csv")

# Print the files that did not converge
if did_not_converge:
    print("Files that did not converge:")
    for file in did_not_converge:
        print(file)
else:
    print("All files converged successfully.")

